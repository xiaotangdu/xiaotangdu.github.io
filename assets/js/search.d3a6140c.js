(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,e,r){"use strict";r.r(e),e.default=[{title:"实训笔记",path:"/posts/%E5%AE%9E%E8%AE%AD.html",strippedContent:' # html    # 第一天        ##### 1.安装 nodejs。    ##### 2.安装 typora。    ##### 3.安装 jquery。    ##### 4.注册 github。    代码托管器    ##### 5.学习 github菜鸟教程。    https://www.runoob.com/git/git-tutorial.html    #### 注：    ##### 1.ctrl + / 是查看源代码。    ##### 2.保存文件后缀名为.md。    ##### 3.代码符号输入后必须加空格。    # 第二天        ##### 1.安装Git。    (上传工具)    ##### 2.打开www.github.com，创建新的代码库，命名为：用户名+.github.io。    ##### 3.创建工作文件夹，在文件夹中右键打开Git Bash Hear，输入git clone+粘贴代码库地址。    ##### 4.在文件夹中创建index.html，并用记事本方式输入H5格式与内容。    ##### 5.右键打开Git Bash Hear。    ##### 6.输入git status    (粘贴本人地址)    ##### 7.输入git add .    (检查状态)    ##### 8.输入git commit -m"(注释)"     （提交版本库）    ##### 9.输入git push    (上传)    ##### 10.上传邮箱。    ##### 11.上传用户名。    ##### 12.复制新手教程。    ##### 13.输入账号密码。    ##### 14.刷新页面，出现上传文件。    ##### 15.复制    用户名+.github.io，打开新网页粘贴。    # 第三天    ##### 1.npm    (国外的下载)。    ##### 2.cnpm    (国内镜像)。    ##### 3.输入npm -v。    ##### 4.百度淘宝镜像，复制使用说明，粘贴至c盘根目录cmd。    ##### 5.等待下载，下载完成在cmd中输入cnpm -v。    ##### 6.输入cnpm install -g @vue/cli。    ##### 7.输入vue -V。    ##### 8.输入cnpm i -g vuepress。    ##### 9.百度vuepress官网学习。    ##### 10.建立工作文件夹，命名用英文。    ##### 11.创建README.md文件。    ##### 12.cmd命令打开文件夹。    ##### 13.输入vuepress dev .。    ##### 14.复制链接，打开浏览器。    # 第四天    ##### 1.创建文件夹，命名为vuepress。    ##### 2.右键打开Git Bash Hear。    ##### 3.百度liujiaozhu666.github.io。    ##### 4.点击页面最下方indigo material。    ##### 5.复制模板分支命令，粘贴至git。    ##### 6.运行init.sh。    ##### 7.后续运行在文件夹cmd中输入npm run dev。    ##### 8.复制链接百度打开。    ##### 9.修改方式：vue...->docs->.vuepress->config.js。    ##### 10.可修改项：title，description，author，email，github。'},{title:"javascript",path:"/posts/js.html",strippedContent:' # 一： JavaScript 简介    n   **JavaScript** **诞生于 1995 年，主要是进行用户输入的合法性验证。**    n **在 1995 年之前，Web 页面的一些验证工作都是由服务器端的语言来实现，这就要求用户输入的数据必须先通过网络传输到服务器端，服务器端进行相应的处理后，再将结果反馈给客户端。**    # 二： JavaScript 的概念和执行原理    n  **JavaScript** **是一种轻型的、解释性的脚本语言，是一种由浏览器内的解释器执行的程序语言**    n **当客户端向服务器端请求页面时，服务器端将整个页面包含 JavaScript 的脚本代码发送到客户端，浏览器从上往下逐行读取并解析其中的 HTML 或脚本代码**    # 三：JavaScript 脚本代码的位置    n 通常可以在 3 个地方编写 JavaScript 的脚本代码：    n <script><\/script> 标签中直接编写脚本程序代码    n 脚本程序代码放置在一个单独的文件中，然后在网页文件中引用这个脚本程序文件    n 将脚本程序代码作为某个 HTML 页面元素的事件属性值或超链接的 href 属性值    例如：    ## HTML 文件混合方式：    <body>      <script type="text/javascript">        **document.write(" 欢迎来到 JavaScript 课堂 ");**      <\/script>    </body>    网页显示：**欢迎来到 JavaScript课堂。**    ## 2. JS 文件引用方式    **1.****创建 JavaScript 文件，命名为demo1.js。**    **2.html** **页面，在  标签中引用 JavaScript 文件**    ****    ** **type="text/javascript">**    **    **注意：带有 src 属性的  标签不应该在 <script> 标签之间包含任何额外的 JavaScript 代码，否则嵌入的代码会被忽略**    ## 3. HTML 代码嵌入方式    n **将脚本程序代码作为某个 HTML 页面元素的事件属性值或超链接的 href 属性值**         ****      <a href="javascript:document.write(\'<h2> 欢迎来到 JavaScript 课堂 </h2>\');">hello</a>    ****    # 四：JS变量：    ## 变量有三种使用方式：    先声明再赋值  如：var message; message="hi";    同时声明和赋值变量  如：var message="hi";    不声明直接赋值  如：message="hi";    ## 变量命名规则：    n 第一个字符必须是一个字母、下划线（_）或一个美元符号（$）     n 其他字符可以是字母、下划线、美元符号或数字    n 区分大小写    n 不能与关键字同名，如 while 循环、for 循环和 if判断 等         **示例：**    ****      <script type="text/javascript">        **var x=2;**        **var y=3;**        **var z=x+y;**        **alert("x="+x+",y="+y+",z="+z);**    ​    **字符串   +x数字  字符串**      ****    ****    # 五：数据类型    ## n JavaScript 中有 5 种简单数据类型，也称为基本数据类型：    ### n undefined    ### n  null     空    ### n  boolean    ### n  number      数字    ### n  string     字符串    ### n 另外还有一种复杂数据类型——object对象类型    ### n 由于JavaScript中的变量是弱类型，可通过typeof操作符获取变量的数据类型    #### 示例：    <body>      <script type="text/javascript">        var str=“message”; 字符串        document.write(typeof 类型 str+"<br/>");        var other;   未定义        document.write(typeof other+"<br/>");        var numb=10.0;  数字        document.write(typeof numb+"<br/>");        var date=new Date(); 无        document.write(typeof date+"<br/>");        var bool=1<2;  判断语句        document.write(typeof bool);      <\/script>    </body>    # 六：JavaScript 注释    ## n JavaScript 与很多语言一样，如 Java、C# 都支持同样的注释形式：    ## n  单行注释：//    ## n  多行注释：  /* 注释内容 */     ### 示例：// 声明并初始化一个变量    ### var v = 5;    ### /* 使用 for 循环输出 Hello5 次 */    ### document.write("Hello!<br/>");    ### document.write("Hello!<br/>");    ### document.write("Hello!<br/>");    ### document.write("Hello!<br/>");    ### document.write("Hello!<br/>");    ### /*    ### 这些注释不会显示在页面上，    ### 但是可以通过页面的源代码查看到    ### */    ###      # 七：对象    ## 1：Object 对象和 Date 对象：    ### 1：JavaScript 的内部对象：    n JavaScript 提供了一些非常有用的内部对象，按使用方式可分为两种：    n 实例对象。在引用该对象的属性和方法时，必须先使用 new 关键字创建一个对象实例，然后再使用“对象实例名 . 成员”的格式来进行访问。    n 静态对象。在引用该对象的属性和方法时不需要使用 new 关键字来创建对象实例，可以直接使用“类名 . 成员”的格式来进行访问    ###  2：Object对象：    n  Object 对象提供了一种创建自定义对象的简单方式，因为它不需要开发人员定义构造函数。    n 在程序运行时可以为JavaScript 对象添加属性，因此使用 Object 对象创建出自定义对象非常简便    用法：<script type="text/javascript">        var person = new Object();        person.name="Tom";        person.age=25;        function getAttr(attr) {          alert(person[attr]);        }    <\/script>    <p><input type="button" value=" 显示姓名 " onClick="getAttr(\'name\')"/> </p>    <p><input type="button" value=" 显示年龄 " onClick="getAttr(\'age\')"/></p>    ### 3：Date对象；    n 通过创建 Date 对象，可以获取本地计算机中的日期与时间。    n 初始化 Date 对象有 4 种方式，语法如下：    n （1）new Date() // 当前日期和时间    n （2）new Date(milliseconds) // 返回从 1970 年 1 月 1 日至今的毫秒数    n （3）new Date(dateString)    n （4）new Date(year, month, day, hours, minutes, seconds, milliseconds)    #### 用法：<script type="text/javascript">    ####     var now = new Date();    ####     document.write(now+"<br/>");    ####     var date1 = new Date("October 13, 1975 11:13:00")    ####     document.write(date1+"<br/>");    ####     var date2 = new Date(79,5,24)    ####     document.write(date2+"<br/>");    ####     var date3 = new Date(79,5,24,11,33,0)    ####     document.write(date3+"<br/>");    ####     var date4 = new Date(60*60*1000);    ####     document.write(date4);    #### <\/script>    ### 4：Math对象；    #### n JavaScript 中的基本数值运算符可以用来进行一些简单的数学计算，而使用Math 对象可以进行更多的高级运算，如平方根、三角函数、对数和随机数等    #### n 与其他对象不同，Math 不需要使用new 关键字创建对象的实例    ##### n Math对象中常用的方法：    | 方法                      | 功能                                              |  | ------------------------- | ------------------------------------------------- |  | Math.abs(number)          | 返回number 的绝对值                               |  | Math.ceil(number)         | 对number 向上取整，如Math.ceil(67.6) 返回值是68   |  | Math.floor(number)        | 对number 向下取整，如Math.floor (67.6) 返回值是67 |  | Math.max(number1,number2) | 返回number1 与number2 中的较大值                  |  | Math.min(number1,number2) | 返回number1 与number2 中的较小值                  |  | Math.pow(x,y)             | 返回x 的y 次幂                                    |  | Math.random()             | 返回0 和1 之间的伪随机数，可能为0，但总是小于1    |  | Math.round(number)        | 返回最接近number 的整数                           |  | Math.sqrt(number)         | number 的平方根                                   |         ##### 示例：使用Math对象，完成一个猜数游戏    ###### var number=Math.floor(1+10*Math.random()); // 获取1 到10 之间的整数    ###### function guess_click() {    ######    var info = document.getElementById("guess").value; // 获取用户输入的内容    ######    if(info.trim()!=null && info.trim()!="" && !isNaN(info)) {    ######      var input=Math.floor(info); // 向下取整    ######      if(number == input) {    ######         alert(" 猜对了!");    ######      } else if( number > input) {    ######         alert(" 猜小了！ ");    ######      } else {    ######         alert(" 猜大了!");    ######      }    ######    } else {    ######      alert(" 请输入整数");    ######    }    # 八：数组    n   数组列表    n 数组列表用于表示一组数据的集合，它由一对方括号（[]）包围，列表中的每个元素用逗号分隔，数组元素可以是任意类型的数据（包括其他数组），数组的定义如下：    说明：每个数组变量都有一个length属性，表示该数组中元素的个数    定义一个数组变量后，就可以使用“数组变量名[索引号]”的格式来访问每个数组元素    数组列表中的第一个元素的索引号为0，其后的每个元素的索引号依次递增，最后的元素索引为数组的长度-1    如果数组元素本身是一个数组，那么这个元素称为子数组，可以使用“数组变量名[子数组索引号][子数组中的元素索引号]”的格式来访问子数组中的元素    ## 示例：<body>    ##    <script type="text/javascript">    ##    var arr=[\' 白色\',\' 紫色\',\' 橙色\',\' 红色\'];    ##    for(var i=0; i<arr.length;i++) {    ##       document.write(arr[i]+"<br/>");    ##    }    ##    <\/script>    ## </body>    # 九：String对象：    ### n 当某字符串使用单引号或双引号标注时，可以被当作字符串对象实例进行处理，从而直接调用String 对象的属性和方法    ### n 常用属性：length    ### n 常用方法：    | **方法**  | **描述**                                                     |  | --------- | ------------------------------------------------------------ |  | charAt()  | 返回字符串对象中指定索引处的字符，索引从0 开始，如"Hello World".charAt(3)，返回字符"l" |  | indexOf() | 返回某个子字符串在目标字符串中首次出现的位置，如"Hello World".indexOf("a")，返回-1，在目标字符串中没有子字符串"a"，故返回-1 |  | substr()  | 从指定索引位置开始截取指定长度的字符串，  如"Hello World".substr(2,3)，返回"llo"。第一个参数表示从索引为2 的字符开始截取，即"l"，第二个参数表示截取的长度 |'}]}}]);